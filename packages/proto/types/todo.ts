// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.3
// source: todo.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export interface PaginationDto {
  page: number;
  skip: number;
  limit: number;
}

export interface UpdateTodoDto {
  id: string;
  title: string;
  description: string;
}

export interface FindTodoByIdDto {
  id: string;
}

export interface Empty {
}

export interface Todos {
  todos: Todo[];
}

export interface CreateTodoDto {
  userId: string;
  title: string;
  description: string;
}

export interface Todo {
  id: string;
  userId: string;
  title: string;
  description: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
  deletedAt: Timestamp | undefined;
}

export interface TodoServiceClient {
  createTodo(request: CreateTodoDto, metadata?: Metadata): Observable<Todo>;

  findOneTodo(request: FindTodoByIdDto, metadata?: Metadata): Observable<Todo>;

  updateTodo(request: UpdateTodoDto, metadata?: Metadata): Observable<Todo>;

  queryTodos(request: Observable<PaginationDto>, metadata?: Metadata): Observable<Todos>;
}

export interface TodoServiceController {
  createTodo(request: CreateTodoDto, metadata?: Metadata): Promise<Todo> | Observable<Todo> | Todo;

  findOneTodo(request: FindTodoByIdDto, metadata?: Metadata): Promise<Todo> | Observable<Todo> | Todo;

  updateTodo(request: UpdateTodoDto, metadata?: Metadata): Promise<Todo> | Observable<Todo> | Todo;

  queryTodos(request: Observable<PaginationDto>, metadata?: Metadata): Observable<Todos>;
}

export function TodoServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createTodo", "findOneTodo", "updateTodo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["queryTodos"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TodoService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TODO_SERVICE_NAME = "TodoService";
