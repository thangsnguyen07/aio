// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.12.4
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'

import { Observable } from 'rxjs'

export const protobufPackage = 'auth'

export interface LoginRequest {
  username: string
  password: string
}

export interface RegisterRequest {
  username: string
  email: string
  password: string
}

export interface ResponseDto {
  success: boolean
}

export interface Payload {
  userId: string
  username: string
}

export interface Token {
  accessToken: string
  refreshToken: string
}

export interface TokenRequest {
  token: string
}

export const AUTH_PACKAGE_NAME = 'auth'

export interface AuthServiceClient {
  isTokenValid(request: TokenRequest): Observable<ResponseDto>

  generateToken(request: Payload): Observable<Token>

  login(request: LoginRequest): Observable<Token>

  register(request: RegisterRequest): Observable<Token>
}

export interface AuthServiceController {
  isTokenValid(request: TokenRequest): Promise<ResponseDto> | Observable<ResponseDto> | ResponseDto

  generateToken(request: Payload): Promise<Token> | Observable<Token> | Token

  login(request: LoginRequest): Promise<Token> | Observable<Token> | Token

  register(request: RegisterRequest): Promise<Token> | Observable<Token> | Token
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['isTokenValid', 'generateToken', 'login', 'register']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('AuthService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('AuthService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const AUTH_SERVICE_NAME = 'AuthService'
