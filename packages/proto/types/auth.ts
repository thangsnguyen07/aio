// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface LoginRequest {
  username: string;
  password: string;
}

export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
}

export interface ResponseDto {
  success: boolean;
}

export interface GenerateAccessTokenRequest {
  refreshToken: string;
}

export interface GenerateAccessTokenResponse {
  accessToken: string;
}

export interface Token {
  accessToken: string;
  refreshToken: string;
}

export interface TokenRequest {
  accessToken: string;
}

export interface AuthServiceClient {
  isTokenValid(request: TokenRequest): Observable<ResponseDto>;

  generateAccessToken(request: GenerateAccessTokenRequest): Observable<GenerateAccessTokenResponse>;

  login(request: LoginRequest): Observable<Token>;

  register(request: RegisterRequest): Observable<Token>;

  logout(request: TokenRequest): Observable<ResponseDto>;
}

export interface AuthServiceController {
  isTokenValid(request: TokenRequest): Promise<ResponseDto> | Observable<ResponseDto> | ResponseDto;

  generateAccessToken(
    request: GenerateAccessTokenRequest,
  ): Promise<GenerateAccessTokenResponse> | Observable<GenerateAccessTokenResponse> | GenerateAccessTokenResponse;

  login(request: LoginRequest): Promise<Token> | Observable<Token> | Token;

  register(request: RegisterRequest): Promise<Token> | Observable<Token> | Token;

  logout(request: TokenRequest): Promise<ResponseDto> | Observable<ResponseDto> | ResponseDto;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["isTokenValid", "generateAccessToken", "login", "register", "logout"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
