// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.3
// source: chat.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface SendMessageRequest {
  roomId: string;
  content: string;
}

export interface MessageResponse {
  id: string;
  roomId: string;
  content: string;
  senderId: string;
  createdAt: string;
}

export interface GetMessagesRequest {
  roomId: string;
  limit: number;
  offset: number;
}

export interface GetMessagesResponse {
  roomId: string;
  messages: MessageResponse[];
  limit: number;
  offset: number;
  total: number;
}

export interface CreateRoomRequest {
  name: string;
  participantIds: string[];
}

export interface RoomResponse {
  id: string;
  name: string;
  participantIds: string[];
}

export interface JoinRoomRequest {
  roomId: string;
}

export interface ChatServiceClient {
  sendMessage(request: SendMessageRequest, metadata?: Metadata): Observable<MessageResponse>;

  getMessages(request: GetMessagesRequest, metadata?: Metadata): Observable<GetMessagesResponse>;

  createRoom(request: CreateRoomRequest, metadata?: Metadata): Observable<RoomResponse>;

  joinRoom(request: JoinRoomRequest, metadata?: Metadata): Observable<RoomResponse>;
}

export interface ChatServiceController {
  sendMessage(
    request: SendMessageRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  getMessages(
    request: GetMessagesRequest,
    metadata?: Metadata,
  ): Promise<GetMessagesResponse> | Observable<GetMessagesResponse> | GetMessagesResponse;

  createRoom(
    request: CreateRoomRequest,
    metadata?: Metadata,
  ): Promise<RoomResponse> | Observable<RoomResponse> | RoomResponse;

  joinRoom(
    request: JoinRoomRequest,
    metadata?: Metadata,
  ): Promise<RoomResponse> | Observable<RoomResponse> | RoomResponse;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendMessage", "getMessages", "createRoom", "joinRoom"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";
