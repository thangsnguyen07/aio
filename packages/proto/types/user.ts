// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.3
// source: user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface CreateUserRequest {
  username: string;
  email: string;
  password: string;
}

export interface PaginationRequest {
  page: number;
  skip: number;
  limit: number;
}

export interface User {
  id: string;
  username: string;
  email: string;
  isActive: boolean;
  isVerified: boolean;
}

export interface Users {
  users: User[];
}

export interface GetUserRequest {
  username: string;
}

export interface GetUserByIdRequest {
  id: string;
}

export interface UpdateUserPasswordRequest {
  userId: string;
  currentPassword: string;
  newPassword: string;
}

export interface UpdateUserRequest {
  userId: string;
  email: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  email: string;
  password: string;
}

export interface Token {
  accessToken: string;
  refreshToken: string;
}

export interface LogoutRequest {
  userId: string;
}

export interface LogoutResponse {
  message: string;
}

export interface RefreshRequest {
  refreshToken: string;
}

export interface RefreshResponse {
  accessToken: string;
}

export interface GenerateAccessTokenRequest {
  userId: string;
}

export interface GenerateAccessTokenResponse {
  accessToken: string;
}

export interface UserServiceClient {
  createUser(request: CreateUserRequest, metadata?: Metadata): Observable<User>;

  getUser(request: GetUserRequest, metadata?: Metadata): Observable<User>;

  getUserById(request: GetUserByIdRequest, metadata?: Metadata): Observable<User>;

  updateUserPassword(request: UpdateUserPasswordRequest, metadata?: Metadata): Observable<User>;

  updateUser(request: UpdateUserRequest, metadata?: Metadata): Observable<User>;

  listUsers(request: PaginationRequest, metadata?: Metadata): Observable<Users>;

  login(request: LoginRequest, metadata?: Metadata): Observable<Token>;

  register(request: RegisterRequest, metadata?: Metadata): Observable<Token>;

  logout(request: LogoutRequest, metadata?: Metadata): Observable<LogoutResponse>;

  refresh(request: RefreshRequest, metadata?: Metadata): Observable<RefreshResponse>;

  generateAccessToken(
    request: GenerateAccessTokenRequest,
    metadata?: Metadata,
  ): Observable<GenerateAccessTokenResponse>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  getUser(request: GetUserRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  getUserById(request: GetUserByIdRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  updateUserPassword(request: UpdateUserPasswordRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserRequest, metadata?: Metadata): Promise<User> | Observable<User> | User;

  listUsers(request: PaginationRequest, metadata?: Metadata): Promise<Users> | Observable<Users> | Users;

  login(request: LoginRequest, metadata?: Metadata): Promise<Token> | Observable<Token> | Token;

  register(request: RegisterRequest, metadata?: Metadata): Promise<Token> | Observable<Token> | Token;

  logout(
    request: LogoutRequest,
    metadata?: Metadata,
  ): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  refresh(
    request: RefreshRequest,
    metadata?: Metadata,
  ): Promise<RefreshResponse> | Observable<RefreshResponse> | RefreshResponse;

  generateAccessToken(
    request: GenerateAccessTokenRequest,
    metadata?: Metadata,
  ): Promise<GenerateAccessTokenResponse> | Observable<GenerateAccessTokenResponse> | GenerateAccessTokenResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "getUser",
      "getUserById",
      "updateUserPassword",
      "updateUser",
      "listUsers",
      "login",
      "register",
      "logout",
      "refresh",
      "generateAccessToken",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
